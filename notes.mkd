Good morning folks, my name is Adrien Thebo, and I'm going to be speaking about
how to write awesome modules. It's a very exciting time to be in configuration
management and we're seeing awesome new developments in this field all the time,
but since it's such a new field there are a lot of things we're all trying to
understand. This presentation should provide some strategies for writing modules
that are cleaner to write, easier to maintain, and make sharing as effortless as
possible.

Before we launch in, I should probably explain a bit of my background. I got
into systems administration in 2005 and I've been coding for about as long.
I would normally go on and on about devops at this point, but Devops days starts
tomorrow so I'll let someone else handle that.

I started at Puppet Labs in 2011 in the Operations team, maintaining
infrastructure and developing an ungodly amount of Puppet modules. In February I
decided that it was time to hop the fence to dev, and now I'm one of the
community developers that are dedicated to working with contributors to get
their pull requests merged.

Shockingly enough, I have a number of modules that I develop and maintain these
days. One of my modules is puppet-network, for handling non-volatile network
configuration for servers, and the other one that configures portage. I also
develop on a project called r10k, which is a tool for puppet environment git
workflow, and can replace librarian-puppet.

I also do development on a number of Vagrant plugins. One is vagrant-hosts which
handles DNS configuration to make cross-VM communication easy with Vagrant, and
I also develop vagrant-pe\_build, which allows you to install Puppet Enterprise
on vagrant boxes as part of the initial provisioning, so that all you need to do
to rebuild an environment is `vagrant destroy -f && vagrant up`.

Other things I like to do: talk really really really really fast. So seriously,
if I become completely unintelligible, flag me down.

Sooooo, let's talk about modules.

While traditional software development and configuration management have a lot
in common, one of the major divisions is the degree of maturity in the field.
Software development has had 40 years of research and experience to figure out
design patterns and best practices. Cfengine 2 came out in 1998, so 'modern'
configuration management has been around for 15 years *tops*, and it's a much
smaller field than development has been. People frequently ask about 'The One
True Way' to do things, and right now we kinda shrug our shoulders and say "um,
do things? Hopefully not bad things?"

Clearly, we need to start somewhere to figure out how to write awesome modules.
The following are what I've identified as Good Things (TM) that can help write
awesome modules.

Here are the basic points I'm going to talk about:

First, separate your logic and configuration. Configuring your systems shouldn't
mean rooting around in modules and touching a bunch of files, and logic/data
separation makes this easier.

Second, Puppet modules act as 'interfaces' for the services they're managing.
When you write a module you are deciding what options are available and how
they can be used, so writing good modules means thinking "how should this module
be used?"

Third, use semantic versioning. Semantic versioning allows people to use your
modules and upgrade them without fear of breaking changes, and depend on
features without guessing.

Lastly, test everything. No, seriously. We're all human and we all make
mistakes; tests help mitigate human error, catch regressions, and can be used to
prove that your modules are doing what you expect them to.

Let's start with data/logic separation. It's something that you'll hear, "split
up your logic and data." what exactly does that mean?

Think of logic as the series of steps that you're going to do to perform an
action. The logic of a module figures out the ordering and actions. With no
information

In contrast, data is just data. Package names, file locations, and so forth.

So you need both to get anything done, so why split them up?

The key lies in how we modify these things. If you're configuring a webserver,
you generally have a set of steps that you need to do, like install the package,
configure it, and start it. If you have a Debian system and a Redhat system, you
have to do more or less the same thing, so the logic for setting up a webserver
can be shared.  However each one has their own package names, configuration
directories and so forth, so that should be in a separate area. If you make that
separation you can add other platforms like FreeBSD without having to hack up a
bunch of manifests, and if you fix a bug in the logic then you fix the bug
everywhere.

The traditional package/file/service pattern is a good example of this.
Something like this is one of the most basic modules you'll get that's fairly
useful, and a lot of modules start out like this. It's hardcode city, but until
you need to support a couple of platforms it'll do.

However, once you start hitting that point of adding conditionals based on the
platform for what packages and files to use, stop. Just stop. Make a params
class. Extract the data. It'll save you maintenance time in the end.

So who likes to prevent module reuse? Anyone? Anyone? Take it from me, the best
way to turn people away from your modules is to hardcode EVERYTHING and make
people hand-edit your module to make things work.

For example, we could have a params class like this. If someone doesn't inspect
the `params` class closely, they'll use a terrible default password, open to the
world, and they will get owned so hard, so fast. This is Real Bad. So yay, we're
using a params class, but there's no direct way to edit it and it's trying to
use default values for things that _shouldn't_ have default values.

Alternately, we can used class parameters on a parameterized class like this.
With this configuration the user _must_ fill out the relevant fields or the
module will fail to compile. Failing fast is much better than silently doing the
wrong thing.

Data binding is also another major tool to help manage code/data separation to
get clean modules. Data binding was released in Puppet 3 and allows
configuration data to be loaded from one place and injected into your modules.
Parameterized classes solved part of the problem with data/code separation in
that they let you specify configuration data outside of a manifest, but another
manifest would have to have that data. With data binding, your classes can
handle the logic of class composition, and your data can be handled somewhere
else.

To take a look at data binding, we can go back to the mysql example. We still
use the same syntax for the parameterized class, but now when a class is
evaluated it can automatically do a data lookup for parameters with no
explicitly given parameter.

This brings us to another important topic: using modules as interfaces. Puppet
serves to simply the management of services by abstracting away configuration
file formats, restarting services and installing packages and so forth. However,
by abstracting that away and providing parameterized classes and options, you
are building an interface to that service. In effect, you are deciding how end
users will use that service.

This is a pretty powerful thing, but it has some consequences.

Writing and Sharing Great Modules
=================================

Adrien Thebo (@nullfinch)
Puppet Labs

Who is this guy?
----------------

IT Operations/Software Development, ~8 years

Operations Engineer @puppetlabs, 2 years

Community Developer @puppetlabs, 3 months

Let's talk about modules
------------------------

BEST PRACTICES?!?!?!
--------------------

  * Traditional development: 40+ years to mature
  * Modern config. mgmt: 15 years, max

So where do we start?
---------------------

  * Module structures and patterns
  * Separate your logic and configuration
  * Use semantic versioning

Know the patterns
-----------------

### Package-file-service

Humble beginnings for many modules

    package { 'nginx':
      ensure => present,
    }

    file { '/etc/nginx/nginx.conf':
      ensure  => present,
      source  => 'puppet:///modules/nginx/nginx.conf',
      require => Package['nginx'],
    }

    service { 'nginx':
      ensure    => running,
      enable    => true,
      subscribe => File['nginx'],
    }

### Strategy Pattern

Pick your implementation at runtime

    class firewall {

      $strategies = {
        'OpenBSD' => 'pf',
        'Solaris' => 'ipfilter',
        'Linux'   => 'iptables',
      }

      if $kernel in keys($strategies) {
        $implementation = $strategies[$kernel]
        include "firewall::${implementation}"
      }
      else {
        fail("Firewall has no implementation for kernel ${kernel}")
      }
    }

Separate logic from data
------------------------

### Hardcoding

Want to prevent people from reusing your modules?

Hardcode everything!

### Parameters

Bad:

    class redmine::params {
      # ¯\_(ツ)_/¯
      $database_server   = '10.14.2.1'
      $database_user     = 'redmine'
      $database_password = 'somepassword'
    }

  * INSECURE DEFAULTS?!?!?!

- - -

Good:

    class redmine::params(
      $database_server,   # Force the module user to fill this out
      $database_password, # Fail fast rather than potentially use bad data
      $database_user = 'redmine' # Sane default
    ) {
    }

### Data binding

Puppet 

Use Semantic Versioning
-----------------------

Breaking the API means nobody will update your module

Semantic versioning aims to help resolve this

### SemVer in a nutshell

Releases match x.y.z

#### Major releases: **x**.0.0

Backwards incompatible changes

#### Minor releases: x.**y**.0

Backwards compatible features

#### Patch releases: x.y.**z**

Bugfixes

### Safety in SemVer

SemVer takes the risk out of upgrading

You can understand the implications of upgrading right away

Reuse, reuse, reuse
-------------------

Writing good code is hard.

Make other people do your work.

### Get dependencies from the Forge

### Collaborate on existing modules

### Encourage people to publish on the Forge

Polish those modules
--------------------

### Write a README and provide examples

### Best practices

  * puppet style guide
  * puppet-lint

Test your manifests with rspec-puppet
-------------------------------------

  * travis-ci.org

Learn to love types and providers
---------------------------------

### Why types and providers are your friends

### Test your types and providers

Recruit a community
-------------------

Congratulations, your module is a hit!

Prepare for a deluge of bug reports and feature requests

